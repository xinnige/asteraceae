// Code generated by MockGen. DO NOT EDIT.
// Source: common/utils.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOInterface is a mock of IOInterface interface
type MockIOInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIOInterfaceMockRecorder
}

// MockIOInterfaceMockRecorder is the mock recorder for MockIOInterface
type MockIOInterfaceMockRecorder struct {
	mock *MockIOInterface
}

// NewMockIOInterface creates a new mock instance
func NewMockIOInterface(ctrl *gomock.Controller) *MockIOInterface {
	mock := &MockIOInterface{ctrl: ctrl}
	mock.recorder = &MockIOInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOInterface) EXPECT() *MockIOInterfaceMockRecorder {
	return m.recorder
}

// ReadFull mocks base method
func (m *MockIOInterface) ReadFull(r io.Reader, buf []byte) (int, error) {
	ret := m.ctrl.Call(m, "ReadFull", r, buf)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFull indicates an expected call of ReadFull
func (mr *MockIOInterfaceMockRecorder) ReadFull(r, buf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFull", reflect.TypeOf((*MockIOInterface)(nil).ReadFull), r, buf)
}

// MockBufferInterface is a mock of BufferInterface interface
type MockBufferInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBufferInterfaceMockRecorder
}

// MockBufferInterfaceMockRecorder is the mock recorder for MockBufferInterface
type MockBufferInterfaceMockRecorder struct {
	mock *MockBufferInterface
}

// NewMockBufferInterface creates a new mock instance
func NewMockBufferInterface(ctrl *gomock.Controller) *MockBufferInterface {
	mock := &MockBufferInterface{ctrl: ctrl}
	mock.recorder = &MockBufferInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBufferInterface) EXPECT() *MockBufferInterfaceMockRecorder {
	return m.recorder
}

// ReadFrom mocks base method
func (m *MockBufferInterface) ReadFrom(r io.Reader) (int64, error) {
	ret := m.ctrl.Call(m, "ReadFrom", r)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFrom indicates an expected call of ReadFrom
func (mr *MockBufferInterfaceMockRecorder) ReadFrom(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockBufferInterface)(nil).ReadFrom), r)
}

// String mocks base method
func (m *MockBufferInterface) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockBufferInterfaceMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockBufferInterface)(nil).String))
}

// MockSerialInterface is a mock of SerialInterface interface
type MockSerialInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSerialInterfaceMockRecorder
}

// MockSerialInterfaceMockRecorder is the mock recorder for MockSerialInterface
type MockSerialInterfaceMockRecorder struct {
	mock *MockSerialInterface
}

// NewMockSerialInterface creates a new mock instance
func NewMockSerialInterface(ctrl *gomock.Controller) *MockSerialInterface {
	mock := &MockSerialInterface{ctrl: ctrl}
	mock.recorder = &MockSerialInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSerialInterface) EXPECT() *MockSerialInterfaceMockRecorder {
	return m.recorder
}

// Marshal mocks base method
func (m *MockSerialInterface) Marshal(v interface{}) ([]byte, error) {
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal
func (mr *MockSerialInterfaceMockRecorder) Marshal(v interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockSerialInterface)(nil).Marshal), v)
}

// MarshalIndent mocks base method
func (m *MockSerialInterface) MarshalIndent(v interface{}, prefix, indent string) ([]byte, error) {
	ret := m.ctrl.Call(m, "MarshalIndent", v, prefix, indent)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalIndent indicates an expected call of MarshalIndent
func (mr *MockSerialInterfaceMockRecorder) MarshalIndent(v, prefix, indent interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalIndent", reflect.TypeOf((*MockSerialInterface)(nil).MarshalIndent), v, prefix, indent)
}

// Unmarshal mocks base method
func (m *MockSerialInterface) Unmarshal(data []byte, v interface{}) error {
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal
func (mr *MockSerialInterfaceMockRecorder) Unmarshal(data, v interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockSerialInterface)(nil).Unmarshal), data, v)
}
